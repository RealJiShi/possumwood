{
    "connections": [
        {
            "in_node": "draw_0",
            "in_port": "vertex_data",
            "out_node": "cgal_0",
            "out_port": "vertex_data"
        },
        {
            "in_node": "program_0",
            "in_port": "fragment_shader",
            "out_node": "fragment_shader_0",
            "out_port": "shader"
        },
        {
            "in_node": "cgal_0",
            "in_port": "mesh",
            "out_node": "loader_0",
            "out_port": "polyhedron"
        },
        {
            "in_node": "draw_0",
            "in_port": "program",
            "out_node": "program_0",
            "out_port": "program"
        },
        {
            "in_node": "program_0",
            "in_port": "vertex_shader",
            "out_node": "vertex_shader_0",
            "out_port": "shader"
        }
    ],
    "description": "### OBJ file loading\n\nThis simple demo shows how to load an object from .obj file, and display it in the viewport.\n\nThe display code is contained in a subnetwork (double click the blue node to \"enter\" it), and is based on a trivial implementation of a vertex and fragment OpenGL shader.",
    "nodes": {
        "cgal_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 122.497360229492,
                    "y": 929.636596679688
                }
            },
            "name": "display",
            "type": "render/vertex_data/cgal"
        },
        "draw_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 326.637939453125,
                    "y": 826.474548339844
                }
            },
            "name": "draw",
            "type": "render/draw"
        },
        "fragment_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -91.7326736450195,
                    "y": 632.002502441406
                }
            },
            "name": "fragment_shader",
            "ports": {
                "source": "#version 130 \n \nin vec4 frag_position;\n\nout vec4 color; \n \nvoid main() { \n\t// compute fake normal by cross product of surface derivatives\n\tvec3 norm = cross(dFdx(frag_position).xyz, dFdy(frag_position).xyz);\n\tnorm = normalize(norm);\n \n\tcolor = vec4(norm.z, norm.z, norm.z, 1); \n} \n"
            },
            "type": "render/fragment_shader"
        },
        "loader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 120.766845703125,
                    "y": 761.318786621094
                }
            },
            "name": "loader",
            "ports": {
                "filename": "$EXAMPLES/stanford_models/bunny.obj",
                "name": "mesh"
            },
            "type": "cgal/loader"
        },
        "program_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": 135.267425537109,
                    "y": 564.163391113281
                }
            },
            "name": "program",
            "type": "render/program"
        },
        "vertex_shader_0": {
            "blind_data": {
                "type": "possumwood::NodeData",
                "value": {
                    "x": -60.4222717285156,
                    "y": 504.151916503906
                }
            },
            "name": "vertex_shader",
            "ports": {
                "source": "#version 130 \n \nin vec3 position;              // position attr from the vbo \nout vec4 frag_position;        // fragment position for fake normal computation\n \nuniform mat4 iProjection;      // projection matrix \nuniform mat4 iModelView;       // modelview matrix \n \nvoid main() {\n\tfrag_position = iModelView * vec4(position, 1.0);\n   \tgl_Position = iProjection * frag_position;\n} \n"
            },
            "type": "render/vertex_shader"
        }
    },
    "scene_config": {
        "end_time": 5.0,
        "fps": 24.0,
        "start_time": 0.0
    },
    "ui_geometry": "AdnQywADAAAAAAAAAAAAAQAABqoAAAOfAAAAAAAAABkAAAQ6AAACJAAAAAACAAAABqsAAAAAAAAAFwAABqoAAAOf",
    "ui_state": "AAAA/wAAAAD9AAAAAgAAAAAAAAKRAAAC+fwCAAAAAfsAAAAKAGcAcgBhAHAAaAEAAAB1AAAC+QAAAJgBAAADAAAAAQAAAagAAAL5/AIAAAAC+wAAABQAcAByAG8AcABlAHIAdABpAGUAcwEAAAB1AAAA8wAAAHYBAAAD+wAAAAwAZQBkAGkAdABvAHIBAAABaQAAAgUAAACqAQAAAwAAAnAAAAL5AAAABAAAAAQAAAAIAAAACPwAAAABAAAAAgAAAAA="
}